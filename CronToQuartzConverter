function CronToQuartzConverter() {
    this.getQuartz = function (cron) {
        var data = [];
        var quartzEntry;

        // check for cron magic entries
        quartzEntry = parseCronMagics(cron);

        if (quartzEntry) {
            data.push(quartzEntry);
        } else {

            // if cron magic entries not found, proceed to parsing normal cron format
            var crontabEntry = cron.split(' ');
            quartzEntry = parseCronSyntax(crontabEntry);

            data.push(quartzEntry);

            if (crontabEntry[2] !== '*' && crontabEntry[4] !== '*') {

                crontabEntry[2] = '*';

                quartzEntry = parseCronSyntax(crontabEntry);
                data.push(quartzEntry);
            }

        }

        return data;
    };

    this.convert = function (cron) {
        var arr = this.getQuartz(cron);

        for (var i = 0, l = arr.length; i < l; i++) {
            arr[i] = arr[i].join(' ');
        }

        return arr;
    };

    function advanceNumber(str) {

        var quartzCompatibleStr = '';
        var num;
        str.split('').forEach(function (chr) {

            num = parseInt(chr);

            // char is an actual number
            if (!isNaN(num)) {
                // number is in allowed range
                if (num >= 0 && num <= 7) {
                    quartzCompatibleStr += num + 1;
                } else {
                    // otherwise default to 1, beginning of the week
                    quartzCompatibleStr = 1;
                }
            } else {
                quartzCompatibleStr += chr;
            }



        });

        return quartzCompatibleStr;
    }

    function parseCronSyntax(crontabEntry) {

        var quartzEntry = [];

        // first we initialize the seconds to 0 by default because linux CRON entries do not include a seconds definition
        quartzEntry.push('0');

        // quartz scheduler can't handle an OR definition, and so it doesn't support both DOM and DOW fields to be defined
        // for this reason we need to shift one of them to be the value or * and the other to be ?
        var toggleQuartzCompat = false;

        crontabEntry.forEach(function (item, index, array) {


            // index 0 = minutes
            // index 1 = hours
            // these cron definitions should be compatible with quartz so we push them as is
            if (index === 0 || index === 1) {
                quartzEntry.push(item);
            }

            // index 2 = DOM = Day of Month
            if (index === 2) {
                if (item !== '?') {
                    toggleQuartzCompat = true;
                }

                if (item === '*') {
                    toggleQuartzCompat = false;
                    item = '?';
                }

                quartzEntry.push(item);
            }

            // index 3 = Month
            if (index === 3) {
                quartzEntry.push(item);
            }

            // index 4 = DOW = Day of Week
            if (index === 4) {

                // day of week needs another adjustments - it is specified as 1-7 in quartz but 0-6 in crontab
                var itemAbbreviated = advanceNumber(item);

                if (toggleQuartzCompat === true) {
                    quartzEntry.push('?');
                } else {
                    quartzEntry.push(itemAbbreviated);
                }
            }

            if (index >= 5) {
                return true;
            }

        });

        quartzEntry.push('*');

        return quartzEntry;

    }

    function parseCronMagics(crontab) {

        var quartzEntry = false;

        // @hourly
        if (crontab.indexOf('@hourly') === 0) {
            quartzEntry = ['0', '0', '*', '*', '*', '?', '*'];
        }

        // @daily and @midnight
        if (crontab.indexOf('@daily') === 0 || crontab.indexOf('@midnight') === 0) {
            quartzEntry = ['0', '0', '0', '*', '*', '?', '*'];
        }

        // @weekly
        if (crontab.indexOf('@weekly') === 0) {
            quartzEntry = ['0', '0', '0', '?', '*', '1', '*'];
        }

        // @monthly
        if (crontab.indexOf('@monthly') === 0) {
            quartzEntry = ['0', '0', '0', '1', '*', '?', '*'];
        }

        // @yearly and @annually
        if (crontab.indexOf('@yearly') === 0 || crontab.indexOf('@annually') === 0) {
            quartzEntry = ['0', '0', '0', '1', '1', '?', '*'];
        }

        return quartzEntry || false;
    }
}

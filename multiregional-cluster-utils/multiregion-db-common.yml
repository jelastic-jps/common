actions:
  createEnvs:
  - script: |
      var app_name = '${globals.cluster_app}'.toLowerCase(),
      externalIpAddresses = ('${settings.externalIpAddresses}' === 'true'),
      regions = '${settings.regions}'.split(','), actions = [];
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
        actions.push({
          jps: "${baseUrl}/scripts/manifest_" + app_name + ".jps?_r=${fn.random}",
          envName: "${settings.envName}-" + cluster,
          loggerName: "${settings.envName}-" + cluster,
          envGroups: "${globals.envGroups}",
          displayName: "${globals.displayName-" + cluster + "}",
          region: regions[cluster-1],
          settings: {
            nodeType: "${settings.nodeType}",
            password: "${globals.password}",
            regions: "${settings.regions}",
            topology: "${settings.topology}",
            externalIpAddresses: externalIpAddresses,
            vpnAppid: "${globals.vpnAppid}",
            internalNetworkEnabled: "${settings.internalNetworkEnabled}",
            mainEnvName: "${settings.envName}"
          }
        });
      }
      return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  installClusterLogic:
    - install: ${baseUrl}/addons/auto-cluster.yaml
      envName: ${settings.envName}-1
      settings:
        regions: ${settings.regions}
        pgpool2Regions: ${globals.pgpool2Regions}
        mainEnvName: ${settings.envName}
        topology: ${settings.topology}
        masterAddress: ${globals.master_address_sqldb-1}

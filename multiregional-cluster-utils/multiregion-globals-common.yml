actions:
  initGlobals:
    - script: |
        var cluster_app = '${globals.cluster_app}';
        var regions = '${settings.regions}'.split(','),
            pgpoolRegions = '${settings.pgpool2Regions}'.split(','),
            cluster_app_display_name = cluster_app[0].toUpperCase() + cluster_app.slice(1),
            envGroups = eval('(' + MANIFEST + ')').envGroups, index,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals,
            resp, domain;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i])
                glbs["domain-" + index] = resp[a].domain;
            }
          }
          if ('${settings.topology}' != 'maxrealia') {
            if (index == 1) {
              glbs["displayName-" + index] = cluster_app_display_name + " Cluster Primary";
              glbs["initial_env_master-" + index] = "true";
            } else {
              glbs["displayName-" + index] = cluster_app_display_name + " Cluster Secondary " + i;
              glbs["initial_env_master-" + index] = "false";
            }
          } else {
              glbs["displayName-" + index] = cluster_app_display_name + " Cluster " + (i + 1);
          }
        }
        for (var i = 0, n = pgpoolRegions.length; i < n; i ++) {	
          index = i + 1;	
          glbs["pgpoolRegion-" + index] = pgpoolRegions[i];	
        }
        glbs["envGroups"] = envGroups;
        glbs["regionsCount"] = regions.length;
        glbs["master_env_name"] = "${settings.envName}-1";
        return { result: 0, onAfterReturn: onAfterReturn };
